import urllib3
import base64
import json
import os

HEADER_ACCEPT="application/json;version=3"
HEADER_CONTENT_TYPE="application/json"
AZION_API_ENDPOINT="https://api.azionapi.net"

class SimpleRequest:
    def __init__(self):
        self.http = urllib3.PoolManager()

    def request(self, method, url, headers=None, data=None, json=None):
        if json is not None:
            import json as _json
            data = _json.dumps(json).encode('utf-8')
            if headers is None:
                headers = {}
            headers['Content-Type'] = 'application/json'

        response = self.http.request(method, url, headers=headers, body=data)
        return SimpleResponse(response)

    def get(self, url, headers=None):
        return self.request('GET', url, headers=headers)

    def post(self, url, headers=None, data=None, json=None):
        return self.request('POST', url, headers=headers, data=data, json=json)

    def put(self, url, headers=None, data=None, json=None):
        return self.request('PUT', url, headers=headers, data=data, json=json)

    def patch(self, url, headers=None, data=None, json=None):
        return self.request('PATCH', url, headers=headers, data=data, json=json)

    def delete(self, url, headers=None):
        return self.request('DELETE', url, headers=headers)

class SimpleResponse:
    def __init__(self, response):
        self._response = response
        self.status_code = response.status
        self.headers = response.headers
        self.text = response.data.decode('utf-8')

    def json(self):
        import json
        return json.loads(self.text)


class AzionPurge:
    def __init__(self, api_key):
        self.api_key = api_key
        self.num_purged_urls = 0
    
    def purge_cache_key(self, cache_key, layer="edge_caching"):
        headers = {
            "Authorization": f"Token {self.api_key}",
            "Accept": "application/json; version=3",
            "Content-Type": "application/json"
        }
        data = {
            "urls": [cache_key],
            "method": "delete",
            "layer": layer
        }
        response = requests.post("https://api.azionapi.net/purge/cachekey", headers=headers, json=data)
        if response.ok:
            self.num_purged_urls += 1
            print(f"Cache purged for cache key {cache_key}")
        else:
            print(f"Error purging cache for cache key {cache_key}: {response.text}")
    
    def purge_url(self, url):
        headers = {
            "Authorization": f"Token {self.api_key}",
            "Accept": "application/json; version=3",
            "Content-Type": "application/json"
        }
        data = {
            "urls": [url],
            "method": "delete"
        }
        response = requests.post("https://api.azionapi.net/purge/url", headers=headers, json=data)
        if response.ok:
            self.num_purged_urls += 1
            print(f"Cache purged for url {url}")
        else:
            print(f"Error purging cache for url {url}: {response.text}")


class AzionAuth:
    def __init__(self, user, password):
        self.user = user
        self.password = password
        self.local_token = None
        self.token = None

    def auth(self):
        self.local_token = self.create_local_token(self.user, self.password)
        self.token = self.create_token(self.local_token)
        return self.token

    def gen_auth_headers(self, token, basic_auth: bool = False) -> dict:
        """
        Gera as headers na hora de autenticar
        """
        auth_headers = {
            "Accept": HEADER_ACCEPT,
            "Content-Type": HEADER_CONTENT_TYPE,
        }
        auth_headers["Authorization"] = "token {}".format(token)
        if basic_auth:
            auth_headers["Authorization"] = "basic {}".format(token)
        return auth_headers

    def create_local_token(self, user: str, password: str) -> str:
        """ Cria um token local com base no nome de usuario e senha da azion localizados nas variaveis
        de Ambiente """
        return base64.b64encode(
            bytes(
                "{}:{}".format(user, password),
                encoding='utf8'
            )
        ).decode("utf8")

    def create_token(self, local_token: str) -> str:
        """ Cria um token na azion, usando o token local """
        headers = self.gen_auth_headers(local_token, True)
        tokens_url = "{0}/{1}".format(AZION_API_ENDPOINT, "/tokens")
        auth_token = requests.post(tokens_url, headers=headers)
        if auth_token.status_code != 200:
            print(auth_token) 
        return auth_token.json()["token"]

    def expire_token(self, local_token: str, token: str) -> None:
        """ Expira o token em caso de crtl+c ou task parada """
        headers = self.gen_auth_headers(local_token, True)
        tokens_url = "{0}/{1}".format(AZION_API_ENDPOINT, "/tokens/{}".format(token))
        expire = requests.delete(tokens_url, headers=headers)
